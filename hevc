#!/bin/bash
######################################################################
# Script Name : hevc
# Description : Encodes video file(s) recursively to HEVC 10Bit video.
# Args        : Refer HELP section for usage.
# Author      : Madhusudhan D Desai
# Email       : mddnix@gmail.com
######################################################################

CleanUpTrap() {
	echo "Oops! hevc ($$) is terminated."
	find "$PWD" -type f -name "hevctmp420_*.mp4" -delete 2>/dev/null
	exit 2
}
trap 'CleanUpTrap' SIGHUP SIGINT SIGQUIT SIGQUIT SIGTERM

# Check if necessary commands are installed.
if [[ $(command -v ffmpeg) ]]    ; then FF="$(command -v ffmpeg)"    ; else echo 'Error: ffmpeg is not installed.' ; exit 1 ; fi
if [[ $(command -v mediainfo) ]] ; then MI="$(command -v mediainfo)" ; else echo 'Error: mediainfo is not installed.' ; exit 1 ; fi
if [[ $(command -v numfmt) ]]    ; then NF="$(command -v numfmt)"    ; else echo 'Error: numfmt (coreutils) is not installed.' ; exit 1 ; fi

# Switch on required Shell Options
shopt -s globstar   # Pattern ** is used to traverse inside subdirectories.
shopt -s nocaseglob # Matching filenames will be case-insensitive.
shopt -s nullglob   # Ignores patterns which match no files.

# Global Variables:
YL='\e[1;33m' # Bold Yellow Color
RD='\e[1;31m' # Bold Red Color
BL='\e[1;34m' # Bold Blue Color
BO='\e[1;97m' # Bold White Color
NC='\e[0m'    # Reset Color
SLNO=0
SIZE=0
COUNT=0
EXTNS=(mp4 avi mkv mov webm wmv flv mpg mpeg)

# Function ShowHelp: (Here Document) Displays help for hevc script. Usage: hevc -h
ShowHelp() {
cat <<HELP
Usage: hevc <OPTION> [ARGS]

  -h          Show Help.

  -l {a,h,x}  Lists all video files recursively in a directory.
                a -> List all video files (hevc and non-hevc).
                h -> List all video files with hevc codec only.
                x -> List all video files which are NOT hevc.

  -e          Encode recursively all videos in a directory and subdirectory(s) to hevc.
HELP
}

# Collect required info from video files.
GetVideoInfo() {
	# Change Internal Field Separator from default space to comma
	OIFS=$IFS
	IFS=","

	getGeneralInfo=( $(mediainfo --Inform="General;%FileSize%,%FileSize/String%,%Duration/String3%" "$1") )
	getVideoInfo=( $(mediainfo --Inform="Video;%Format%,%Width%,%Height%,%Duration%,%FrameRate_Original%" "$1") )
	
	vidSizeByte=${getGeneralInfo[0]} 
	vidSizeKilo=$(echo "$vidSizeByte/1024" | bc -l)
	vidSizeStrg=${getGeneralInfo[1]} 
	vidDuration=${getGeneralInfo[2]} 
	vidCodec=${getVideoInfo[0]}
	vidDimen=${getVideoInfo[1]}x${getVideoInfo[2]}
	if [[ -z ${getVideoInfo[3]} || -z ${getVideoInfo[4]} ]] ; then
		vidFrameCnt="0"
	else
		vidFrameCnt=$(echo "(${getVideoInfo[3]}/1000)*${getVideoInfo[4]}" | bc -l)
	fi
	#vidFrameCnt="${getVideoInfo[3]:-Null}"

	# Restore Internal Field Separator back to space
	IFS=$OIFS
}

# List video files in 'ls -l' style.
DisplayInfo() {

	# Print Header
	printf "\n${YL}SL#    SIZE   CODEC DIMENSION   RUN-TIME    FILENAME${NC}\n"

	# Loop throuh all video files and display info
	for FILE in ${EXTNS[@]/#/**/*.} ; do
		GetVideoInfo "$FILE"

		# For video files with any codec
		if [[ $1 == "a" ]] ; then
			SLNO=$(( $SLNO+1 ))
			SIZE=$(( $SIZE+$vidSizeByte ))
			printf "%03d %9s %-5s %9s %-12s %s\n" \
				"$SLNO" "$vidSizeStrg" "$vidCodec" "$vidDimen" "$vidDuration" "'$FILE'"
		
		# For video files with HEVC codec
		elif [[ $1 == "h" ]] ; then
			if [[ $vidCodec == "HEVC" ]] ; then
				SLNO=$(( $SLNO+1 ))
				SIZE=$(( $SIZE+$vidSizeByte ))
				printf "%03d %9s %-5s %9s %-12s %s\n" \
					"$SLNO" "$vidSizeStrg" "$vidCodec" "$vidDimen" "$vidDuration" "'$FILE'"
			fi

		# For video files which are not HEVC codec
		elif [[ $1 == "x" ]] ; then
			if ! [[ $vidCodec == "HEVC" ]] ; then
				SLNO=$(( $SLNO+1 ))
				SIZE=$(( $SIZE+$vidSizeByte ))
				printf "%03d %9s %-5s %9s %-12s %s\n" \
					"$SLNO" "$vidSizeStrg" "$vidCodec" "$vidDimen" "$vidDuration" "'$FILE'"
			fi
		else
			echo "Invalid option for -l. Refer Help"
			ShowHelp
			exit 1
		fi
	done

	# Print Footer
	SIZE1=$($NF --to=iec $SIZE)
	SIZEL=${SIZE1::-1}
	SIZER=${SIZE1: -1}
	printf "   ${BL}───────────${NC}\n"
	printf "${YL}%9.2f %siB${NC}\n\n" "$SIZEL" "$SIZER"
}

EncodeToHEVC() {

	# Calculate total no of video files which are not encoded with hevc codec
	echo
	for FILE in ${EXTNS[@]/#/**/*.} ; do
		getCodecType=$(mediainfo --Inform="Video;%Format%" "$FILE")
		if ! [[ $getCodecType == "HEVC" ]] ; then
			COUNT=$(( $COUNT+1 ))
			echo -ne "Counting files. Wait... $COUNT\r"
		fi
	done
	echo

	# Loop recursively through directories and encode non-hevc video files to hevc
	for FILE in ${EXTNS[@]/#/**/*.} ; do
		GetVideoInfo "$FILE"
		if ! [[ $vidCodec == "HEVC" ]] ; then
			inputFileName="$FILE"
			inputFileFldr="$(dirname "${FILE}")"
			inputFileBase="${FILE%.*}"
			outputFileName="$(mktemp -u -p "$inputFileFldr" hevctmp420_XXXXXXXXXXXXXXX.mp4)"

			# Print Header
			SLNO=$(( $SLNO+1 ))
			printf "\n($$) Encoding: %d/%d\n" "$SLNO" "$COUNT"
			printf "  Input : '$inputFileName'\n"
			printf "  Output: '$outputFileName'\n"
			#printf "${YL}Frame=${NC}${BL}%5.0f${NC} ${YL}Size=${NC}${BL}%9s${NC} ${YL}Size=${NC}${BL}%8.0fkB${NC} ${YL}Time=${NC}%-12s '%s' '%s' \n" \
			printf "FRAME=%5.0f SIZE=%9s SIZE=%8.0fkB TIME=%-12s RESOLUTION=%s CODEC=%s \n" \
				$vidFrameCnt "$vidSizeStrg" $vidSizeKilo "$vidDuration" "$vidDimen" "$vidCodec"
			
			#Valid presets are ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow and placebo.
			$FF -v error -hide_banner -stats -i "$FILE" \
 			  -c:v libx265 -crf:v 25 -preset superfast -pix_fmt yuv444p10le -x265-params log-level=error \
			  -c:a aac -threads 0 \
			  -f mp4 "$outputFileName"
			
			# Begin Encode. If successful, enter if condition
			if [[ $? -eq 0 ]] ; then
				rm -f -v "$inputFileName"
				if [[ $? -eq 0 ]] ; then
					mv -v -f "$outputFileName" "$inputFileBase.mp4"
				fi
			else
				echo "ffmpeg HEVC failed"

			fi
		fi
	done
}

###########################################
#                MAIN BLOCK               #
###########################################
while getopts ":hl:e" opt ; do
	case $opt in
		h) ShowHelp ;;
		l) LISTTYPE=$OPTARG ;;
		e) EncodeToHEVC ;;
		:) echo "Error: -$OPTARG requires an argument"
			ShowHelp
			exit 1
			;;
		?) echo "Error: unknown option -$OPTARG"
			ShowHelp 
			exit 1 
			;;
	esac
done

if [[ -n $LISTTYPE ]] ; then
	DisplayInfo "$LISTTYPE"
fi
