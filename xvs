#!/usr/bin/env bash
# Script Name : xvs
# Description : Provides various features to manipulate a video file.
# Args        : Refer HELP section for usage.
# Author      : Madhusudhan D Desai
# Email       : mddnix@gmail.com

source BashLib.sh

# Bash shell options
# ------------------
set -o nounset # Exit when script tries to use undeclared variables.
set -o errexit # Exit script when command fails. Add '|| true' to allow fail.

# Constant variables
# ------------------
readonly CURRENT_DIR="$PWD"
readonly SCRIPT_NAME=$(basename $0)
readonly XDIR="/xd"
readonly NDIR="/nd"
readonly XDEV="/dev/sda4"
readonly NDEV="/dev/sda8"
readonly XMAP="XDDM"
readonly NMAP="NDDM"
readonly XUSR="neon"
readonly NUSR="neon"

declare -a show_info=()
mount_dir=
umount_dir=
slow_video=

# Check if necessary commands are installed
# -----------------------------------------
_is_cmd "cryptsetup"
_is_cmd "fuser"
_is_cmd "install"
_is_cmd "ffmpeg"
_is_cmd "ffprobe"

###################################################################################################
# Delete temp files from the directory where the script has been executed.
# Globals/Constants:
#   CURRENT_DIR
###################################################################################################
_trap_cleanup() {
	echo "Oops! $(basename $0) ($$) has terminated."
	echo "Cleaning temporary files..."
	find "${CURRENT_DIR}" -type f -name "tmp_xvs_*.mp4" -print -delete
	echo "Done"
	exit 2
}
trap '_trap_cleanup' SIGHUP SIGINT SIGQUIT SIGQUIT SIGTERM

###################################################################################################
# Show help.
###################################################################################################
_show_help() {
cat <<HELP
Usage: 
 ${SCRIPT_NAME} [OPTIONS]...

Options:
 -h       Show this help.
 -m [xn]  Mount LUKS partition.
 -t       Display metadata tags.
 -u [xn]  Un mount LUKS partition.
HELP
}

###################################################################################################
# Shows short info of video files.
# Arguments:
#   $1: Array of video filenames
###################################################################################################
_show_info() {
	for i ; do
		echo "${i}:"
		ffprobe "${i}" 2>&1 | egrep "Duration|Stream"
		echo
	done
}

###################################################################################################
# Mounts the LUKS partition into a directory. Creates directory if necessary.
# Globals/Constants:
#   XDEV, XDIR, XMAP, XUSR, NDEV, NDIR, NMAP, NUSR
###################################################################################################
_mount_dir() {

	###### Check if $1 has correct values - x or n.
	## (T) Parameter is 'x' or 'n'. Assign constant values to local variables.
	## (F) Parameter is other than 'x' or 'n'. Exit script with an error message.
	if [[ "$1" = "x" ]] ; then
		local dev_name="${XDEV}"
		local dir_name="${XDIR}"
		local map_name="${XMAP}"
		local usr_name="${XUSR}"
	elif [[ "$1" = "n" ]] ; then
		local dev_name="${NDEV}"
		local dir_name="${NDIR}"
		local map_name="${NMAP}"
		local usr_name="${NUSR}"
	else
		echo "Couldn't find mount code... exiting."
		exit 1
	fi

	###### Check if mount directory already (not) exist.
	## (T) Create a directory then apply username, groupname and perm 0770 to that directory.
	## (F) Do nothing.
	if [[ ! -d "${dir_name}" ]] ; then
		echo "Directory '${dir_name}' does not exist. Creating it..."
		sudo install -o "${usr_name}" -g "${usr_name}" -m 0770 -d "${dir_name}" # Create dirctory.
		if [[ $? -eq 0 ]] ; then
			echo "...Done." 
		else 
			echo "Error: Couldn't create directory ${dir_name}."
			exit 1
		fi
	fi

	###### Check if LUKS device already mounted into a directory.
	## (T) Print an error message and do nothing.
	## (F) Open LUKS device and mount it into a directory.
	if [[ $(findmnt -M "${dir_name}") ]] ; then
		echo "${dir_name} already mounted with ${dev_name}. Doing nothing."
		exit 1
	else
		# Check if are in mount directory.
		if [[ "$(echo $PWD)" = "${dir_name}" ]] ; then # You are inside mount point is TRUE. 
			echo "You are inside the mount directory ${dir_name}. Change directory and try again."
			exit 1
		fi
		echo "Mounting ${dev_name} into ${dir_name} ..."
		sudo cryptsetup open --type luks2 "${dev_name}" "${map_name}" # Open LUKS device.
		sudo mount "/dev/mapper/${map_name}" "${dir_name}" # Mount LUKS device in a directory.
		if [[ $? -eq 0 ]] ; then
			echo "${dir_name} mounted. Ready to use."
		else
			echo "Error: Couldn't mount ${dir_name}... Exiting."
			exit 1
		fi
	fi
}

###################################################################################################
# Slows down video file.
# Arguments:
#   $1: Input video file.
# Return:
#   Slowmotion video file
###################################################################################################
_slow_video() {

	# Get video information from ffprobe
	vid_info=$(ffprobe "$1" 2>&1 | egrep 'Duration:|Stream.*Video:')

	# Extract FPS of video
	fps_raw=$(echo "$vid_info" | awk '{for (i=1;i<=NF;i++) if($i ~/fps,/) print $(i-1)}')

	# Extract duration which is in '00:00:00.00,' format.
	time_raw=$(echo "$vid_info" | awk '/Duration:/ {print $2}')
	
	# Trim commna (,) at the end.
	time_trm=${time_raw%,*}

	# Convert 00:00:00.00 fomat to seconds.
	time_sec=$(echo "${time_trm}" | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')

	# Display short video info
	printf "\n%s\n\n" "$vid_info"

	# Print Header
	printf "%4s%10s\n" "#" "DURATION"
	echo "  ============"

	# For 1 to 20 seconds show possible duration for slow motion video
	for i in {1..20} ; do
		total_sec=$(echo "scale=2;$i*$time_sec" | bc -l)
		total_time=$(date -d@$total_sec -u +%M:%S.%2N)
		printf "%4d%10s\n" "$i" "$total_time"
	done

	# Print Tail
	echo "  ------------"

	# Ask Times X
#	read -p "Times X: " timesX
#	local fps_total_dec=$(echo "scale=3;$timesX*$fps_get" | bc -l)
#	echo $timesX
#	echo $fps_get
#	echo $fps_total_dec

}

###################################################################################################
# Lists tags for metadata.
# E: openssl aes-256-cbc -md sha256 -salt -pbkdf2 -iter 1024 -a -in clear1.txt -out encrypt.enc
# D: openssl aes-256-cbc -md sha256 -salt -pbkdf2 -iter 1024 -a -d -in encrypt.enc -out clear2.txt
###################################################################################################
_list_tags() {
Tags() {
cat <<EOF
U2FsdGVkX18oEeaG3t2foUbNkGI4SmiE1mpA79WnUvBp2ayWTkM8xX0EK8kSm0sn
DDEYaZmOBV5crSMnEq6ckOB3hNKtFlOFl3C+D0VeSQ7E5evywvRSzQhVXSd5BtSo
o5LtKLaah/TtrY/2kBiZpe9W0dFsRJ+wI70x4xR9cAfdBBI6rWpPraaqmPQWIYlv
BVBuWbxCwHgivIpUii+p9Xw3kZNHcKOpFMe9c6ldGTVuAegDAAJoPdh4lRawKZjp
wyQQOiyhdlVhf+EFUNDXTAPYkl4c5VApgP1PumksH5VZ8XO0qyMnub3kWceprs5L
mz+nwZxpemURUbJeCWPl9H4XRpn3TFKOwhv2xFDjGQprYgEphjGtO90TWzoDGcgF
i4uV7PJjHRQLO7waa0vIpAOxTSx16MiBqgtxIGbUjZjRT4M63SQ0nIDAIvMn6eLO
mR4JPHwX6ImbSvVNstSS80vxWZ5/paXjHGkQKvuo8rQjTyukHDRSUDYdGXBJQO6Y
6QYJsv4Itu1roEEhr1N17tS5i919ZJAxfFVtac3eOKnmDCvlpwc1EySmT7cqwKKX
HIeyjZTvgkxOlMAMabyCLEJWTGORudbmZV3Bkdh6Slg/NYBnI5wBU8EBsZwh1i3J
nrXtCLZmqvSa5TDw+4zQK9mJIeNZ2fbrome5tL17Fi1a4RU0iE8zv74/Ir7ihpg3
s1GtxduQCGG7hdSS9gEXOqb2+G2v+zKyFWN5QGhjkNHepx7woFZmbwkUmRegKTM6
YstwW9Yk2OTNcj5VY9nAqTpqXAwGrKdY/vgwWoNygVpX51C/00Xngbwx8YDelxgR
xhNKhyo+bfp4TUG7f16ErBOngDCXlFP3XyafHg8w3Z4=
EOF
}

	# Store decrypted tags in valriable. Needs password.
	local var_tags=$(Tags | openssl aes-256-cbc -md sha256 -salt -pbkdf2 -iter 1024 -a -d 2>/dev/null)
	if [[ "${var_tags}" =~ Birthday ]] ; then
		echo
		_title_header "$(_to_upper 'Available Tags')" '>' '<'
		echo "${var_tags}" | column
		echo
	else
	    echo "Sorry! Wrong password. Exiting..."
		exit 1
	fi
}


###################################################################################################
# Unmounts the LUKS partition from a directory.
# Globals/Constants:
#   XDEV, XDIR, XMAP, XUSR, NDEV, NDIR, NMAP, NUSR
###################################################################################################
_umount_dir() {

	###### Check if $1 has correct values - x or n.
	## (T) Parameter is 'x' or 'n'. Assign constant values to local variables.
	## (F) Parameter is other than 'x' or 'n'. Exit script with an error message.
	if [[ "$1" = "x" ]] ; then
		local dev_name="${XDEV}"
		local dir_name="${XDIR}"
		local map_name="${XMAP}"
		local usr_name="${XUSR}"
	elif [[ "$1" = "n" ]] ; then
		local dev_name="${NDEV}"
		local dir_name="${NDIR}"
		local map_name="${NMAP}"
		local usr_name="${NUSR}"
	else
		echo "Couldn't find mount code... exiting."
		exit 1
	fi

	# Check if are unmounting from source directory.
	if [[ "$(echo $PWD)" = "${dir_name}" ]] ; then
		echo "You are inside to-be un-mount directory ${dir_name}. Change directory and try again."
		exit 1
	fi

	###### Check if directory is already mounted.
	## (T) Un-Mount directory.
	## (F) Print an error message and do nothing.
	if [[ $(findmnt -M "${dir_name}") ]] ; then
		echo "Unmounting ${dir_name}..."

		# Check if the mount directory is busy
		if [[ $(sudo fuser --mount "${dir_name}") ]] ; then
			sudo fuser -kvi "${dir_name}" # Kill all busy processes interactively.
		fi
		
		# Lazy umount the directory, then, if successful, close LUKS
		sudo umount -l "${dir_name}"
		if [[ $? -eq 0 ]] ; then
			sudo cryptsetup close "${map_name}" # Close LUKS
			if [[ $? -eq 0 ]] ; then
				echo ""${dir_name}" unmounted.. Done."
			fi
		fi
	else
		echo "${dir_name} not mounted. Doing nothing."
	fi
}


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%% Main Function
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
while getopts ":hi:m:s:tu:" opt ; do
	#echo "Processing $opt : OPTIND is $OPTIND"
	case $opt in
		h) _show_help ;;
		i) show_info+=("$OPTARG") ;;
		m) mount_dir="$OPTARG" ;;
		s) slow_video="$OPTARG" ;;
		t) _list_tags ;;
		u) umount_dir="$OPTARG" ;;
		:) echo "Error: -$OPTARG requires an argument" ; exit 1 ;;
		?) echo "Error: unknown option -$OPTARG" ; exit 1 ;;
	esac
done
shift $(( OPTIND - 1 ))

if [[ ! -z "${show_info[@]}" ]] ; then
	_show_info "${show_info[@]}" 

elif [[ ! -z "$mount_dir" ]] ; then
	_mount_dir "${mount_dir}"

elif [[ ! -z "$slow_video" ]] ; then
	_slow_video "${slow_video}"

elif [[ ! -z "$umount_dir" ]] ; then
	_umount_dir "${umount_dir}"
fi
