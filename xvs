#!/usr/bin/env bash
# Script Name : xvs
# Description : Provides various features to manipulate a video file.
# Args        : Refer HELP section for usage.
# Author      : Madhusudhan D Desai
# Email       : mddnix@gmail.com

source BashLib.sh

# Bash shell options
# ------------------
set -o nounset # Exit when script tries to use undeclared variables.
set -o errexit # Exit script when command fails. Add '|| true' to allow fail.

# Constant variables
# ------------------
readonly SCRIPT_NAME="$(basename "$0")"
readonly XDIR="/xd"
readonly NDIR="/nd"
readonly XDEV="/dev/sda4"
readonly NDEV="/dev/sda8"
readonly XMAP="XDDM"
readonly NMAP="NDDM"
readonly XUSR="neon"
readonly NUSR="neon"

# Global variables
# ----------------
declare -a info_video=()
mount_dir=
umount_dir=
slow_video=
audio_file=
fade_audio=
volume=
raw_video=
artist_name=
title_name=
encode_video=
raw_video=

# Check if necessary commands are installed
# -----------------------------------------
_is_cmd "cryptsetup"
_is_cmd "fuser"
_is_cmd "install"
_is_cmd "ffmpeg"
_is_cmd "ffprobe"

###################################################################################################
# Delete temp files from the directory where the script has been executed.
# Globals/Constants:
#   CURRENT_DIR
###################################################################################################
_trap_cleanup() {
	echo "Oops! $(basename "$0") ($$) has terminated."
	find "$PWD" -type f -name "__XVS*" -print -delete
	exit 2
}
trap '_trap_cleanup' SIGHUP SIGINT SIGQUIT SIGQUIT SIGTERM

###################################################################################################
# Show help.
###################################################################################################
_help_show() {
cat <<HELP
Usage:
 ${SCRIPT_NAME} [OPTIONS]...

Options:
 -h                                                Help. Show this help.
 -c [file]...                                      Concat. Concatenate several videos.
 -e [file] -A [artist] -T [title]                  Encode. Encodes file to 10bit HEVC.
 -i [file]...                                      Info. Show info of video(s).
 -j [file]...                                      Join. Join video with silent audio.
    [file]... -a [audio]                           Join. Join video with audio file.
    [file]... -a [audio] -v [volume]               Join. Join video/audio file with volume.
    [file]... -a [audio] -f [fadeout]              Join. Join video/audio with fadeout.
    [file]... -a [audio] -v [volume] -f [fadeout]  Join. Join video/audio with volume and fadeout.
 -m [xn]                                           Mount. Mounts LUKS partition into directory.
 -r [file]                                         Raw. Encode any video to rawvideo.
 -s [file]                                         Slow. Create slowmotion video.
 -t                                                Tags. Display metadata tags.
 -u [xn]                                           Umount. Unmount LUKS partition from directory.
HELP
}

###################################################################################################
# Concatenate one or several videos.
# Arguments:
#   $1...: Array of input video file.
# Return:
#   Concatenated video file.
###################################################################################################
_cnct_video() {
	local files=
	local extn="$1"
	local tmp_file=
	local output=
	local ctr=1
	local sec=0
	local secs=0
	declare -a get_video_info=()
	declare -a get_audio_info=()

	tmp_file="__XVSCNT$RANDOM.txt" # Temporary file.

	# Club video filenames with '|' inbetween them.
	for i ; do
		get_video_info=( $(mediainfo --fullscreen \
			--Inform="Video;%DisplayAspectRatio/String% %FrameRate% %Format% %Duration%" "$i") )
		
		get_audio_info=( $(mediainfo --fullscreen \
			--Inform="Audio;%Format% %SamplingRate% %Channel(s)%" "$i") )

		# Create text file for concat.
		if ! echo "file '$i'" >> "${tmp_file}" ; then
			echo "I/O Error: Could not create temporary file...exiting"
			exit 1
		fi

		# Print video information
		printf "%2d %8s %7s  %-7s %-7s %5s %3s %6.2f  %s\n" \
			$(( ctr++ )) \
			"${get_video_info[0]}" \
			"${get_video_info[1]}" \
			"${get_video_info[2]}" \
			"${get_audio_info[0]}" \
			"${get_audio_info[1]}" \
			"${get_audio_info[2]}" \
			"$(echo "${get_video_info[3]}"/1000|bc -l)" \
			"${i}" 
		sec=$(echo "scale=2;(${get_video_info[3]})/1000"|bc -l)
		secs=$(echo "scale=2;($secs+$sec)/1"|bc -l)
		files="$files|$i"
	done
	echo "TOTAL: ${secs}"
	files=${files#|*} # Remove '|' at beginning.
	output="_C$(date +%H%M%S).${extn#*.}" # Concatenated output filename.

	# Print output command for reference
	_draw_line "-"
	 echo ffmpeg -v error -hide_banner -stats \
		-f concat -safe 0 \
		-i "${tmp_file}" \
		-c copy "${output}"
	_draw_line "-"
	
	# Start concatenating.
	ffmpeg -v error -hide_banner -stats \
		-f concat -safe 0 \
		-i "${tmp_file}" \
		-c copy "${output}"

	if ! rm "${tmp_file}" 2>/dev/null ; then
		echo "Error: Could not remove temporary file ${tmp_file}".
	fi

	sync
}

###################################################################################################
# Encodes video into 10bit HEVC.
# Arguments:
#   $1: Input video name.
#   $2: Artist.
#   $3: Title.
# Return:
#   A 10bit HEVC video.
###################################################################################################
_encode_video() {
	local in_video="$1"
	local in_artist="$2"
	local in_title="$3"

	local artist_to_pascal=
	local artist_to_lower=
	local title_to_pascal=
	local title_to_lower=

	local the_tags=
	local tmp_choice=
	local tmp_aspect=
	local aspect_ratio=
	local crf_value=
	local preset=
	local output=

	# Change case of artist
	artist_to_pascal="$(_to_pascal "${in_artist}")"
	artist_to_lower="$(_to_lower "${in_artist}")"
	artist_to_lower="${artist_to_lower/ /_}"

	# Change case of title
	title_to_pascal="$(_to_pascal "${in_title}")"
	title_to_lower="$(_to_lower "${in_title}")"
	title_to_lower="${title_to_lower/ /_}"

	# Get tags from user.
	_tags_list
	read -r -p 'Choose Tags: ' "the_tags" # Get list of tags from user.
	the_tags="${the_tags// /_}" # Replace space with _ char.

	# Get aspect ratio from user.
	echo
	echo "Choose Aspect Ration:"
	echo "  1) Normal (Default, press <ENTER> or 1"
	echo "  2) 4:3    (1.33)"
	echo "  3) 16:9   (1.77)"
	echo "  4) 16:10  (1.6)"
	echo "  5) 2.35:1 (2.35)"
	echo "  9) Other"
	read -r tmp_choice

	if [[ ${tmp_choice} -eq 1 || -z ${tmp_choice} ]] ; then
	    aspect_ratio=""

	elif [[ ${tmp_choice} -eq 2 ]] ; then
	    aspect_ratio="-aspect 4:3"

	elif [[ ${tmp_choice} -eq 3 ]] ; then
	    aspect_ratio="-aspect 16:9"

	elif [[ ${tmp_choice} -eq 4 ]] ; then
	    aspect_ratio="-aspect 16:10"

	elif [[ ${tmp_choice} -eq 5 ]] ; then
	    aspect_ratio="-aspect 2.35"

	elif [[ ${tmp_choice} -eq 9 ]] ; then
	    read -r -p 'Provide custom aspect ration: ' tmp_aspect
	    aspect_ratio="-aspect ${tmp_aspect}"
	fi

	# Get CRF value.
	echo
	read -r -p 'Set crf to 23?: ' crf_value
	if [[ -z ${crf_value} ]] ; then
		crf_value=23
	fi
	echo "Selected CRF: ${crf_value}"

	# Get encoding preset
	echo
	echo "Valid presets are ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow and placebo."
	read -r -p 'Select your preset (Default is medium): ' preset
	if [[ -z "${preset}" ]] ; then
	    preset="medium"
	fi
	echo "Selected preset: ${preset}"

	# Output filename
	output="${artist_to_lower}-${title_to_lower}-${the_tags}.mp4"
	if [[ -f "${output}" ]] ; then
		output="${artist_to_lower}-${title_to_lower}-${the_tags}-$(date +%I%M%S).mp4"
	fi

	echo
	echo ffmpeg -v error -hide_banner -stats \
		-i "${in_video}" \
		-c:v libx265 -crf:v "${crf_value}" -preset "${preset}" ${aspect_ratio} -pix_fmt yuv444p10le \
		-c:a aac -b:a 128k -ar 48000 -ac 2 -threads 0 \
		-x265-params log-level=error \
		-metadata artist="${artist_to_pascal}" -metadata title="${title_to_pascal}" \
		-f mp4 "${output}"

	_draw_line "-"

	# Start enconding to HEVC
	time ffmpeg -v error -hide_banner -stats \
		-i "${in_video}" \
		-c:v libx265 -crf:v "${crf_value}" -preset "${preset}" ${aspect_ratio} -pix_fmt yuv444p10le \
		-c:a aac -b:a 128k -ar 48000 -ac 2 -threads 0 \
		-x265-params log-level=error \
		-metadata artist="${artist_to_pascal}" -metadata title="${title_to_pascal}" \
		-f mp4 "${output}"

	sync
}


###################################################################################################
# Shows short info of video file(s).
# Arguments:
#   $1...: Array of video filenames
# Return:
#   Short info of video file(s).
###################################################################################################
_info_video() {
	for i ; do
		echo "${i}:" # Print video file name
		ffprobe "${i}" 2>&1 | grep -E "Duration|Stream" # ffprobe short info
		echo
	done
}

###################################################################################################
# Join video(s) with audio.
# Arguments:
#   $1: Audio file.
#   $2: Volume level.
#   $3: Fadeout seconds.
#   $4...: Video file(s).
# Return:
#   Joined video witj custom audio file.
###################################################################################################
_join_video() {
	local in_audio="$1"   # Audio filename.
	local in_volume="$2"  # Audio volume.
	local in_fade="$3"    # Audio fadeout.
	shift 3               # Move to next 3 argument.
	local in_video=("$@") # Array of video filenames.

	declare -a get_video_info=()
	local ctr=1
	local files=    # Holds concatenated file name(s).
	local sec=0     # Holds seconds of individual video file.
	local secs=0    # Holds Total duration in seconds of all files.
	local bg_audio= # Holds background audio file.
	local afilter=  # Holds audio filter.
	local end_dur=  # Holds total seconds - 1.
	local output=   # Joined avi output filename.
	output="_J$(date +%H%M%S).avi" # Output joined video filename.


	# Find duration of all videos + Join video filenames with '|' inbetween them.
	for i in "${in_video[@]}" ; do
		get_video_info=( "$(mediainfo --fullscreen \
			--Inform="Video;%DisplayAspectRatio/String% %FrameRate% %Duration%" "$i")" )

		sec=$(echo "${get_video_info[2]}/1000"|bc -l) # Duration of each videos.

		secs=$(echo "scale=2;($secs+$sec)/1"|bc -l) # Total duration of all video files.
		files="$files|$i" # Join video filename with '|' inbetween.

		# Print video information
		printf "%2d %8s %7s %6.2f %s\n" \
			$(( ctr++ )) \
			"${get_video_info[0]}" \
			"${get_video_info[1]}" \
			"${sec}" \
			"${i}"
	done
	echo "TOTAL: ${secs} seconds"
	files=${files#|*} # Trim beginning | character.

	# Set background audio.
	if [[ -n "${in_audio}" ]] ; then
		bg_audio="-i ${in_audio} -shortest" # Audio file selected.
	else
		bg_audio="-f lavfi -i anullsrc -shortest"
	fi

	# Set volume level
	if [[ -n "${in_volume}" && -z "${in_fade}" ]] ; then # If only volume is given
		afilter="-af volume=${in_volume}"

	elif [[ -n "${in_fade}" && -z "${in_volume}" ]] ; then # If only fadeout is given
		end_dur=$(echo "scale=2;($secs-$in_fade)/1"|bc -l)
		afilter="-af afade=in:st=0:d=1,afade=out:st=${end_dur}:d=${in_fade}"

	elif [[ -n "${in_volume}" && -n "${in_fade}" ]] ; then # If both volume and fadeout is given
		end_dur=$(echo "scale=2;($secs-$in_fade)/1"|bc -l)
		afilter="-af volume=${in_volume},afade=out:st=${end_dur}:d=${in_fade}"
	else
		afilter="" # No setting
	fi

	_draw_line "-"
	echo ffmpeg -v error -hide_banner -stats \
		-i concat:"${files}" \
		${bg_audio} \
		-c:v rawvideo -vtag YV12 -pix_fmt yuv420p -vf shuffleplanes=0:2:1 \
		-c:a pcm_s16le -ar 48000 -ac 2 \
		${afilter} \
		-map 0:v -map 1:a \
		"${output}"
	_draw_line "-"

	# Start concatenating.
	ffmpeg -v error -hide_banner -stats \
		-i concat:"${files}" \
		${bg_audio} \
		-c:v rawvideo -vtag YV12 -pix_fmt yuv420p -vf shuffleplanes=0:2:1 \
		-c:a pcm_s16le -ar 48000 -ac 2 \
		${afilter} \
		-map 0:v -map 1:a \
		"${output}"
	sync
}

###################################################################################################
# Mounts the LUKS partition into a directory. Creates directory if necessary.
# Globals/Constants:
#   XDEV, XDIR, XMAP, XUSR, NDEV, NDIR, NMAP, NUSR
###################################################################################################
_mount_dir() {

	# Check if $1 has correct values - x or n.
	if [[ "$1" = "x" ]] ; then
		local dev_name="${XDEV}"
		local dir_name="${XDIR}"
		local map_name="${XMAP}"
		local usr_name="${XUSR}"
	elif [[ "$1" = "n" ]] ; then
		local dev_name="${NDEV}"
		local dir_name="${NDIR}"
		local map_name="${NMAP}"
		local usr_name="${NUSR}"
	else
		echo "Couldn't find mount code... exiting."
		exit 1
	fi

	# Check if mount directory already (not) exist.
	if [[ ! -d "${dir_name}" ]] ; then
		echo "Directory '${dir_name}' does not exist. Creating it..."
		if sudo install -o "${usr_name}" -g "${usr_name}" -m 0770 -d "${dir_name}" ; then
			echo "...Done."
		else
			echo "Error: Couldn't create directory ${dir_name}."
			exit 1
		fi
	fi

	# Check if LUKS device already mounted into a directory.
	if [[ $(findmnt -M "${dir_name}") ]] ; then
		echo "${dir_name} already mounted with ${dev_name}. Doing nothing."
		exit 1
	else
		# Check if are in mount directory.
		if [[ "$PWD" = "${dir_name}" ]] ; then # You are inside mount point is TRUE.
			echo "You are inside the mount directory ${dir_name}. Change directory and try again."
			exit 1
		fi
		echo "Mounting ${dev_name} into ${dir_name} ..."
		if sudo cryptsetup open --type luks2 "${dev_name}" "${map_name}" ; then # LUKS open.
			if sudo mount "/dev/mapper/${map_name}" "${dir_name}" ; then # Mount LUKS device.
				echo "${dir_name} mounted. Ready to use."
			else
				echo "Error: Couldn't mount ${dir_name}... Exiting."
				exit 1
			fi
		else
			echo "Error: Couldn't open LUKS partition... Exiting."
			exit 1
		fi
	fi
}

###################################################################################################
# Raw video.
# Arguments:
#   $1: Input video file.
# Return:
#   Rawvideo.
###################################################################################################
_raw_video() {
	local input="$1"
	local output=
	output="_R$(date +%H%M%S).avi" # Output rawvideo filename.

	echo ffmpeg -v error -hide_banner -stats \
		-i "${input}" \
		-c:v rawvideo -vtag YV12 -pix_fmt yuv420p -vf shuffleplanes=0:2:1 \
		-c:a pcm_s16le -ar 48000 -ac 2 \
		-f avi "${output}"
	_draw_line "-"

	ffmpeg -v error -hide_banner -stats \
		-i "${input}" \
		-c:v rawvideo -vtag YV12 -pix_fmt yuv420p -vf shuffleplanes=0:2:1 \
		-c:a pcm_s16le -ar 48000 -ac 2 \
		-f avi "${output}"
	sync
}

###################################################################################################
# Slows down video file.
# Arguments:
#   $1: Input video file.
# Return:
#   Slowmotion video file
###################################################################################################
_slow_video() {
	local input="$1" # vid.mkv
	local get_info=
	local sec=
	local fps=
	local calc_total_frames=
	local orig_frame=
	local frm=
	local tot_frm=
	local tot_sec=
	local tot_clk=

	get_info=$(mediainfo --fullscan --Inform="Video;%Duration% %FrameRate%" "$input") # 3504.000000 23.976
	sec=$(echo "scale=3;${get_info% *}/1000"|bc -l) # 3.504
	fps=${get_info#* }                              # 23.976
	calc_total_frames=$(echo "$sec*$fps"|bc -l)     # 84.011904
	orig_frame=${calc_total_frames%.*}              # 84
	frm=$(( orig_frame - 2 ))                       # 82
	#echo "$input | $get_info | $sec | $fps | $calc_total_frames | $orig_frame | $frm"

	# Print header
	echo "%%% SOURCE: ${input}, ${sec} secs, ${fps} fps, ${orig_frame} frames."
	_draw_line '=' 32
	printf "%4s%8s%7s%9s\n" "#" "FRAME" "SECS" "TIME"
	_draw_line '=' 32

	# Give prediction for 20 seconds
	for i in {1..20} ; do
		tot_frm=$(( i*frm )) # First iteration: (1x82)=82
		tot_sec=$(echo "scale=2;$tot_frm/$fps"|bc -l) # First iteration: (82/23.976)=3.42
		tot_clk=$(date -d@"${tot_sec}" -u +%M:%S.%2N)
		printf "%4d%7d%8.2f%11s\n" "$i" "$tot_frm" "$tot_sec" "$tot_clk"
	done

	# Print tail and ask for slowmotion times.
	_draw_line '-' 32
	read -r -p "  n? " timesN
	if [[ "${timesN}" = "q" ]] ; then
		exit 0
	fi

	# Final variable calulation for output.
	local op_total_frames=
	local op_mid_mfps=
	local op_total_mfps=
	local op_total_sec=
	local op_total_clk=$
	local output=

	op_total_frames=$(echo "scale=0;($timesN*$frm)/1"|bc -l) # Output video total frames.
	op_mid_mfps=$(echo "$timesN*$fps"|bc -l) # Required minterpolate fps (float).
	op_total_mfps=$(printf "%.f" "${op_mid_mfps}") # Output minterpolate fps (round).
	op_total_sec=$(echo "scale=2;$op_total_frames/$fps"|bc -l) # Output total seconds.
	op_total_clk=$(date -d@"${op_total_sec}" -u +%M:%S.%2N) # output total time in clock.
	output="_S${input}_$(date +%H%M%S)_${timesN}_${op_total_sec}.avi" # Output raw avi filename.

	# Print output file details.
	echo
	echo ffmpeg -v error -hide_banner -stats \
		-i "${input}" \
		-f lavfi -i anullsrc -shortest \
		-c:v rawvideo -vtag YV12 -pix_fmt yuv420p \
		-vf "shuffleplanes=0:2:1,minterpolate='fps=${op_total_mfps}',setpts='${timesN}*PTS',fps='fps=${fps}'" \
		-c:a pcm_s16le -ar 48000 -ac 2 \
		-map 0:v -map 1:a \
		-sn -map_chapters -1 \
		-f avi "${output}"
	echo "%%% TARGET: ${output}, ${op_total_mfps} mfps, ${op_total_frames} frames, ${op_total_clk} duration. "
	echo

	# Start encoding slowmotion video
	ffmpeg -v error -hide_banner -stats \
		-i "${input}" \
		-f lavfi -i anullsrc -shortest \
		-c:v rawvideo -vtag YV12 -pix_fmt yuv420p \
		-vf "shuffleplanes=0:2:1,minterpolate='fps=${op_total_mfps}',setpts='${timesN}*PTS',fps='fps=${fps}'" \
		-c:a pcm_s16le -ar 48000 -ac 2 \
		-map 0:v -map 1:a \
		-sn -map_chapters -1 \
		-f avi "${output}"
	sync
}

###################################################################################################
# Lists tags for metadata.
# E: openssl aes-256-cbc -md sha256 -salt -pbkdf2 -iter 1024 -a -in clear1.txt -out encrypt.enc
# D: openssl aes-256-cbc -md sha256 -salt -pbkdf2 -iter 1024 -a -d -in encrypt.enc -out clear2.txt
###################################################################################################
_tags_list() {
Tags() {
cat <<EOF
U2FsdGVkX18oEeaG3t2foUbNkGI4SmiE1mpA79WnUvBp2ayWTkM8xX0EK8kSm0sn
DDEYaZmOBV5crSMnEq6ckOB3hNKtFlOFl3C+D0VeSQ7E5evywvRSzQhVXSd5BtSo
o5LtKLaah/TtrY/2kBiZpe9W0dFsRJ+wI70x4xR9cAfdBBI6rWpPraaqmPQWIYlv
BVBuWbxCwHgivIpUii+p9Xw3kZNHcKOpFMe9c6ldGTVuAegDAAJoPdh4lRawKZjp
wyQQOiyhdlVhf+EFUNDXTAPYkl4c5VApgP1PumksH5VZ8XO0qyMnub3kWceprs5L
mz+nwZxpemURUbJeCWPl9H4XRpn3TFKOwhv2xFDjGQprYgEphjGtO90TWzoDGcgF
i4uV7PJjHRQLO7waa0vIpAOxTSx16MiBqgtxIGbUjZjRT4M63SQ0nIDAIvMn6eLO
mR4JPHwX6ImbSvVNstSS80vxWZ5/paXjHGkQKvuo8rQjTyukHDRSUDYdGXBJQO6Y
6QYJsv4Itu1roEEhr1N17tS5i919ZJAxfFVtac3eOKnmDCvlpwc1EySmT7cqwKKX
HIeyjZTvgkxOlMAMabyCLEJWTGORudbmZV3Bkdh6Slg/NYBnI5wBU8EBsZwh1i3J
nrXtCLZmqvSa5TDw+4zQK9mJIeNZ2fbrome5tL17Fi1a4RU0iE8zv74/Ir7ihpg3
s1GtxduQCGG7hdSS9gEXOqb2+G2v+zKyFWN5QGhjkNHepx7woFZmbwkUmRegKTM6
YstwW9Yk2OTNcj5VY9nAqTpqXAwGrKdY/vgwWoNygVpX51C/00Xngbwx8YDelxgR
xhNKhyo+bfp4TUG7f16ErBOngDCXlFP3XyafHg8w3Z4=
EOF
}

	# Store decrypted tags in valriable. Needs password.
	local var_tags=
	var_tags=$(Tags | openssl aes-256-cbc -md sha256 -salt -pbkdf2 -iter 1024 -a -d 2>/dev/null)
	if [[ "${var_tags}" =~ Birthday ]] ; then
		echo
		_title_header "$(_to_upper 'Available Tags')" '>' '<'
		echo "${var_tags}" | column
		echo
	else
	    echo "Sorry! Wrong password. Exiting..."
		exit 1
	fi
}


###################################################################################################
# Unmounts the LUKS partition from a directory.
# Globals/Constants:
#   XDEV, XDIR, XMAP, XUSR, NDEV, NDIR, NMAP, NUSR
###################################################################################################
_umount_dir() {

	# Check if $1 has correct values - x or n.
	if [[ "$1" = "x" ]] ; then
		local dev_name="${XDEV}"
		local dir_name="${XDIR}"
		local map_name="${XMAP}"
		local usr_name="${XUSR}"
	elif [[ "$1" = "n" ]] ; then
		local dev_name="${NDEV}"
		local dir_name="${NDIR}"
		local map_name="${NMAP}"
		local usr_name="${NUSR}"
	else
		echo "Couldn't find mount code... exiting."
		exit 1
	fi

	# Check if are unmounting from source directory.
	if [[ "$PWD" = "${dir_name}" ]] ; then
		echo "You are inside to-be un-mount directory ${dir_name}. Change directory and try again."
		exit 1
	fi

	# Check if directory is already mounted.
	if [[ $(findmnt -M "${dir_name}") ]] ; then
		echo "Unmounting ${dir_name}..."

		# Check if the mount directory is busy
		if [[ $(sudo fuser --mount "${dir_name}") ]] ; then
			sudo fuser -kvi "${dir_name}" # Kill all busy processes interactively.
		fi

		# Lazy umount the directory, then, if successful, close LUKS
		if sudo umount -l "${dir_name}" ; then
			if sudo cryptsetup close "${map_name}" ; then # Close LUKS
				echo "${dir_name} unmounted.. Done."
			fi
		fi
	else
		echo "${dir_name} not mounted. Doing nothing."
	fi
}


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%% Main Function
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
while getopts ":ha:c:e:f:i:j:m:r:s:tu:v:A:T:" opt ; do
	#echo "Processing $opt : OPTIND is $OPTIND"
	case $opt in
		h) _help_show ;;
		c) cnct_video+=("$OPTARG") ;;
		e) encode_video="$OPTARG" ;;
		i) info_video+=("$OPTARG") ;;
		j) join_video+=("$OPTARG") ;;
		m) mount_dir="$OPTARG" ;;
		r) raw_video="$OPTARG" ;;
		s) slow_video="$OPTARG" ;;
		t) _tags_list ;;
		u) umount_dir="$OPTARG" ;;

		a) audio_file="$OPTARG" ;;
		f) fade_audio="$OPTARG" ;;
		v) volume="$OPTARG" ;;
		A) artist_name="$OPTARG" ;;
		T) title_name="$OPTARG" ;;

		:) echo "Error: -$OPTARG requires an argument" ; exit 1 ;;
		?) echo "Error: unknown option -$OPTARG" ; exit 1 ;;
	esac
done
shift "$((OPTIND-1))"

if [[ "${#cnct_video[@]}" -ne 0 ]] ; then # Concatenate Videos function.
	_cnct_video "${cnct_video[@]}"
fi


## Concatenate Videos function.
#if [[ -n "${cnct_video[@]}" && "${#cnct_video[@]}" -gt 1 ]] ; then
#	_cnct_video "${cnct_video[@]}"
#fi
#
## Encode Videos to HEVC.
#if [[ -n "${encode_video}" && -n "${artist_name}" && -n "${title_name}" ]] ; then
#	_encode_video "${encode_video}" "${artist_name}" "${title_name}"
#fi
#
## Info Videos function.
#if [[ -n "${info_video[@]}" ]] ; then
#	_info_video "${info_video[@]}"
#fi
#
## Join Videos function with only videos.
#if [[ -n "${join_video[@]}" && -z "${audio_file}" && -z "${volume}" && -z "${fade_audio}" ]] ; then
#	_join_video "" "" "" "${join_video[@]}"
#
## Join Videos function with videos and audio.
#elif [[ -n "${join_video[@]}" && -n "${audio_file}" && -z "${volume}" && -z "${fade_audio}" ]] ; then
#	_join_video "${audio_file}" "" "" "${join_video[@]}"
#
## Join Videos function with videos, audio and volume.
#elif [[ -n "${join_video[@]}" && -n "${audio_file}" && -n "${volume}" && -z "${fade_audio}" ]] ; then
#	_join_video "${audio_file}" "${volume}" "" "${join_video[@]}"
#
## Join Videos function with videos, audio and fade-out.
#elif [[ -n "${join_video[@]}" && -n "${audio_file}" && -z "${volume}" && -n "${fade_audio}" ]] ; then
#	_join_video "${audio_file}" "" "${fade_audio}" "${join_video[@]}"
#
## Join Videos function with videos, audio, volume and fade-out.
#elif [[ -n "${join_video[@]}" && -n "${audio_file}" && -n "${volume}" && -n "${fade_audio}" ]] ; then
#	_join_video "${audio_file}" "${volume}" "${fade_audio}" "${join_video[@]}"
#fi
#
## Raw video.
#if [[ -n "${raw_video}" ]] ; then
#	_raw_video "${raw_video}"
#fi
#
## Mount device into a folder.
#if [[ -n "${mount_dir}" ]] ; then
#	_mount_dir "${mount_dir}"
#fi
#
## Slowmotion videos.
#if [[ -n "${slow_video}" ]] ; then
#	_slow_video "${slow_video}"
#fi
#
## Unmount device from folder.
#if [[ -n "${umount_dir}" ]] ; then
#	_umount_dir "${umount_dir}"
#fi
